import { Vec, SimpleVec } from std::vec;

export struct StringUtf8 {
    data: Vec<u8>;
}

extend StringUtf8 {
    fn new (): StringUtf8 {
        return StringUtf8 {
            data: SimpleVec<u8>::new(),
        };
    }
}

extend StringUtf8 with From<&str> {
    fn from(other: &str): StringUtf8 {
        @unimplemented("not sure exactly how this should work.");
    }
}

extend str with Into<StringUtf8> {
    fn into(&self): StringUtf8 {
        return StringUtf8::from(self);
    }
}

// test code
/*
import { StringUtf8 } from std::string;

fn test() {
    const name = StringUtf8::new();
    const email = "some.name@gmail.com";

    func_needing_StringUtf8(email.into<StringUtf8>());
}
*/
